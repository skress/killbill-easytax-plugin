/*
 * This file is generated by jOOQ.
 */
package org.killbill.billing.plugin.easytax.dao.gen.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.killbill.billing.plugin.easytax.dao.gen.Indexes;
import org.killbill.billing.plugin.easytax.dao.gen.Keys;
import org.killbill.billing.plugin.easytax.dao.gen.Public;
import org.killbill.billing.plugin.easytax.dao.gen.tables.records.EasytaxTaxationsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EasytaxTaxations extends TableImpl<EasytaxTaxationsRecord> {

    private static final long serialVersionUID = 1916917684;

    /**
     * The reference instance of <code>public.easytax_taxations</code>
     */
    public static final EasytaxTaxations EASYTAX_TAXATIONS = new EasytaxTaxations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EasytaxTaxationsRecord> getRecordType() {
        return EasytaxTaxationsRecord.class;
    }

    /**
     * The column <code>public.easytax_taxations.record_id</code>.
     */
    public final TableField<EasytaxTaxationsRecord, Long> RECORD_ID = createField(DSL.name("record_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('easytax_taxations_record_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.easytax_taxations.kb_tenant_id</code>.
     */
    public final TableField<EasytaxTaxationsRecord, String> KB_TENANT_ID = createField(DSL.name("kb_tenant_id"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.easytax_taxations.kb_account_id</code>.
     */
    public final TableField<EasytaxTaxationsRecord, String> KB_ACCOUNT_ID = createField(DSL.name("kb_account_id"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.easytax_taxations.kb_invoice_id</code>.
     */
    public final TableField<EasytaxTaxationsRecord, String> KB_INVOICE_ID = createField(DSL.name("kb_invoice_id"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.easytax_taxations.kb_invoice_item_ids</code>.
     */
    public final TableField<EasytaxTaxationsRecord, String> KB_INVOICE_ITEM_IDS = createField(DSL.name("kb_invoice_item_ids"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL::text", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.easytax_taxations.total_tax</code>.
     */
    public final TableField<EasytaxTaxationsRecord, BigDecimal> TOTAL_TAX = createField(DSL.name("total_tax"), org.jooq.impl.SQLDataType.NUMERIC(15, 9).defaultValue(org.jooq.impl.DSL.field("NULL::numeric", org.jooq.impl.SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.easytax_taxations.created_date</code>.
     */
    public final TableField<EasytaxTaxationsRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>public.easytax_taxations</code> table reference
     */
    public EasytaxTaxations() {
        this(DSL.name("easytax_taxations"), null);
    }

    /**
     * Create an aliased <code>public.easytax_taxations</code> table reference
     */
    public EasytaxTaxations(String alias) {
        this(DSL.name(alias), EASYTAX_TAXATIONS);
    }

    /**
     * Create an aliased <code>public.easytax_taxations</code> table reference
     */
    public EasytaxTaxations(Name alias) {
        this(alias, EASYTAX_TAXATIONS);
    }

    private EasytaxTaxations(Name alias, Table<EasytaxTaxationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private EasytaxTaxations(Name alias, Table<EasytaxTaxationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> EasytaxTaxations(Table<O> child, ForeignKey<O, EasytaxTaxationsRecord> key) {
        super(child, key, EASYTAX_TAXATIONS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EASYTAX_TAXATIONS_ACCOUNT_INVOICE_IDX);
    }

    @Override
    public Identity<EasytaxTaxationsRecord, Long> getIdentity() {
        return Keys.IDENTITY_EASYTAX_TAXATIONS;
    }

    @Override
    public UniqueKey<EasytaxTaxationsRecord> getPrimaryKey() {
        return Keys.EASYTAX_TAXATIONS_PKEY;
    }

    @Override
    public List<UniqueKey<EasytaxTaxationsRecord>> getKeys() {
        return Arrays.<UniqueKey<EasytaxTaxationsRecord>>asList(Keys.EASYTAX_TAXATIONS_PKEY);
    }

    @Override
    public EasytaxTaxations as(String alias) {
        return new EasytaxTaxations(DSL.name(alias), this);
    }

    @Override
    public EasytaxTaxations as(Name alias) {
        return new EasytaxTaxations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EasytaxTaxations rename(String name) {
        return new EasytaxTaxations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EasytaxTaxations rename(Name name) {
        return new EasytaxTaxations(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, String, String, BigDecimal, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
